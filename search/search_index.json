{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to melusine","text":""},{"location":"#overview","title":"Overview","text":"<p>Melusine is a high-level library for emails processing that can be used to :</p> <ul> <li>Categorize emails using AI, regex patterns or both</li> <li>Prioritize urgent emails</li> <li>Extract information</li> <li>And much more !</li> </ul>"},{"location":"#why-melusine","title":"Why melusine ?","text":"<p>The added value of melusine mainly resides in the following aspects:</p> <ul> <li>Off-the-shelf features :  melusine comes with a number of features that can be used straightaway<ul> <li>Segmenting messages in an email conversation</li> <li>Tagging message parts (Email body, signatures, footers, etc)</li> <li>Transferred email handling</li> </ul> </li> <li>Execution framework : users can focus on the email qualification code and save time on the boilerplate code  <ul> <li>debug mode  </li> <li>pipeline execution  </li> <li>code parallelization</li> <li>etc</li> </ul> </li> <li>Integrations : the modular nature of melusine makes it easy to integrate with a variety of AI frameworks   (HuggingFace, Pytorch, Tensorflow, etc)</li> <li>Production ready : melusine builds-up on the feedback from several years of running automatic email processing  in production at MAIF.</li> </ul>"},{"location":"#the-melusine-package","title":"The melusine package","text":"<pre><code>melusine/\n    docs/  # Documentation (using mkdocs-material).\n    exemples/  # Tutorials and exemples\n    src/  # Sources of the melusine package.\n        backend/  # Define execution backends (JSON, Pandas, Polars, etc)\n        conf/  # Configuration loading and default conf\n        data/  # Dummy data for examples and prototyping\n        io/  # Save/Load operations\n        models/  # AI/ML related features\n        regex/  # Regex related code\n        testing/  # Pipeline testing code\n    tests/  # Extensive testing of the code and the tutorials.\n</code></pre>"},{"location":"#getting-started","title":"Getting started","text":"<p>Get started with melusine following our (tested!) tutorials:</p> <ul> <li> <p>Getting Started</p> </li> <li> <p>MelusinePipeline</p> </li> <li> <p>MelusineTransformers</p> </li> <li> <p>MelusineRegex</p> </li> <li> <p>ML models</p> </li> <li> <p>MelusineDetector</p> </li> <li> <p>Configurations</p> </li> <li> <p>Basic Classification</p> </li> </ul>"},{"location":"advanced/ContentTagger/","title":"Use custom message tags","text":""},{"location":"advanced/CustomDetector/","title":"Use a custom MelusineDetector template","text":""},{"location":"advanced/CustomDetector/#specify-abstract-methods","title":"Specify abstract methods","text":""},{"location":"advanced/CustomDetector/#row-transformations-vs-dataframe-transformations","title":"Row transformations vs dataframe transformations","text":""},{"location":"advanced/ExchangeConnector/","title":"Connect melusine to a Microsoft Exchange Mailbox","text":""},{"location":"advanced/PreTrainedModelsHF/","title":"Use pre-trained models from HuggingFace","text":""},{"location":"contribute/how_to_contribute/","title":"How to contribute to Melusine","text":""},{"location":"contribute/maif/","title":"MAIF","text":""},{"location":"history/history/","title":"Project history","text":"<p>Melusine originated at MAIF in 2019.  MAIF is a mutual insurance company funded in 1934 and based in Niort (France).  MAIF is a \"Soci\u00e9t\u00e9 \u00e0 mission\" meaning that its activities are</p>"},{"location":"history/history/#motivation","title":"Motivation","text":"<p>MAIF receives a large number of emails everyday and needs solutions to process them  efficiently while maximizing customer satisfaction. Typical applications of automated email  processing include:</p> <ul> <li>Email routing: Making sure that emails reach the most suited service to be processed</li> <li>Email prioritization: Treating the most urgent emails first</li> <li>Email summarization: Making it easy and fast for MAIF employees to grasp the email intention</li> </ul>"},{"location":"history/history/#open-sourcing","title":"Open sourcing","text":"<p>bla bla</p>"},{"location":"history/history/#refactoring","title":"Refactoring","text":"<p>From 2018 to 2023</p>"},{"location":"philosophy/philosophy/","title":"Code philosophy","text":""},{"location":"philosophy/philosophy/#what-is-a-code-philosophy-and-why-do-i-need-it","title":"What is a code philosophy and why do I need it ?","text":""},{"location":"philosophy/philosophy/#design-patterns","title":"Design patterns","text":""},{"location":"tutorials/00_GettingStarted/","title":"Getting started with Melusine","text":"<p>Let's run emergency detection with melusine :</p> <ul> <li>Load a fake email dataset</li> <li>Load a demonstration pipeline</li> <li>Run the pipeline  <ul> <li>Apply email cleaning transformations  </li> <li>Apply emergency detection</li> </ul> </li> </ul>"},{"location":"tutorials/00_GettingStarted/#input-data","title":"Input data","text":"<p>Email datasets typically contain information about:</p> <ul> <li>Email sender</li> <li>Email recipients</li> <li>Email subject/header</li> <li>Email body</li> <li>Attachments data</li> </ul> <p>The present tutorial only makes use of the body and header data.</p> body header 0 This is an \u00ebm\u00e8rg\u00e9n\u00e7y Help 1 How is life ? Hey ! 2 Urgent update about Mr. Annoying Latest news 3 Please call me now URGENT"},{"location":"tutorials/00_GettingStarted/#code","title":"Code","text":"<p>A typical code for a melusine-based application looks like this :</p> <ol> <li>This tutorial uses one of the default pipeline configuration <code>demo_pipeline</code>. Melusine users will typically define their own pipeline configuration.    See more in the Configurations tutorial</li> </ol>"},{"location":"tutorials/00_GettingStarted/#output-data","title":"Output data","text":"<p>The pipeline created extra columns in the dataset. Some columns are temporary variables required by detectors (ex: <code>normalized_body</code>) and some are detection results with direct business value (ex: <code>emergency_result</code>).</p> body header normalized_body emergency_result 0 This is an \u00ebm\u00e8rg\u00e9n\u00e7y Help This is an emergency True 1 How is life ? Hey ! How is life ? False 2 Urgent update about Mr. Annoying Latest news Urgent update about Mr. Annoying False 3 Please call me now URGENT Please call me now True"},{"location":"tutorials/00_GettingStarted/#pipeline-steps","title":"Pipeline steps","text":"<p>Illustration of the pipeline used in the present tutorial :</p> <pre><code>---\ntitle: Demonstration pipeline\n---\nflowchart LR\n    Input[[Email]] --&gt; A(Cleaner)\n    A(Cleaner) --&gt; C(Normalizer)\n    C --&gt; F(Emergency\\nDetector)\n    F --&gt; Output[[Qualified Email]]</code></pre> <ul> <li><code>Cleaner</code> : Cleaning transformations such as uniformization of line breaks (<code>\\r\\n</code> -&gt; <code>\\n</code>)</li> <li><code>Normalizer</code> : Text normalisation to delete/replace non utf8 characters (<code>\u00e9\u00f6\u00e0</code> -&gt; <code>eoa</code>)</li> <li><code>EmergencyDetector</code> : Detection of urgent emails</li> </ul> <p>Info</p> <p>This demonstration pipeline is kept minimal but typical pipelines include more complex preprocessing and a variety of detectors. For example, pipelines may contain:</p> <ul> <li>Email Segmentation : Split email conversation into unitary messages</li> <li>ContentTagging : Associate tags (SIGNATURE, FOOTER, BODY) to parts of messages</li> <li>Appointment detection : For exemple, detect \"construction work will take place on 01/01/2024\" as an appointment email.</li> <li>More on preprocessing in the MelusineTransformers tutorial</li> <li>More on detectors in the MelusineDetector tutorial</li> </ul>"},{"location":"tutorials/00_GettingStarted/#debug-mode","title":"Debug mode","text":"<p>End users typically want to know what lead melusine to a specific detection result. The debug mode generates additional explainability info.</p> <p>A new column <code>debug_emergency</code> is created.</p> ... emergency_result debug_emergency 0 ... True [details_below] 1 ... False [details_below] 2 ... False [details_below] 3 ... True [details_below] <p>Inspecting the debug data gives a lot of info:</p> <ul> <li><code>text</code> : Effective text considered for detection.</li> <li><code>EmergencyRegex</code> : melusine used an <code>EmergencyRegex</code> object to run detection.</li> <li><code>match_result</code> : The <code>EmergencyRegex</code> did not match the text</li> <li><code>positive_match_data</code> : The <code>EmergencyRegex</code> matched positively the text pattern \"Urgent\" (Required condition)</li> <li><code>negative_match_data</code> : The <code>EmergencyRegex</code> matched negatively the text pattern \"Mr. Annoying\" (Forbidden condition)</li> <li><code>BLACKLIST</code> : Detection groups can be defined to easily link a matching pattern to the corresponding regex. DEFAULT is used if no detection group is specified.</li> </ul> <pre><code># print(df.iloc[2][\"debug_emergency\"])\n{\n'text': 'Latest news\\nUrgent update about Mr. Annoying'},\n'EmergencyRegex': {\n'match_result': False,\n'negative_match_data': {\n'BLACKLIST': [\n{'match_text': 'Mr. Annoying', 'start': 32, 'stop': 44}\n]},\n'neutral_match_data': {},\n'positive_match_data': {\n'DEFAULT': [\n{'match_text': 'Urgent', 'start': 12, 'stop': 18}\n]\n}\n}\n</code></pre>"},{"location":"tutorials/01_MelusinePipeline/","title":"MelusinePipeline","text":"<p>The <code>MelusinePipeline</code> class is at the core of melusine. It inherits from the <code>sklearn.Pipeline</code> class and adds extra functionalities such as :</p> <ul> <li>Instantiation from configurations</li> <li>Input/output coherence check</li> <li>Debug mode</li> </ul>"},{"location":"tutorials/01_MelusinePipeline/#code","title":"Code","text":""},{"location":"tutorials/02_MelusineTransformers/","title":"MelusineTransformers","text":""},{"location":"tutorials/03_MelusineRegex/","title":"MelusineRegex","text":""},{"location":"tutorials/04_UsingModels/","title":"Using AI models","text":""},{"location":"tutorials/05a_MelusineDetectors/","title":"Melusine Detectors","text":"<p>The <code>MelusineDetector</code> component aims at standardizing how detection  is performed in a <code>MelusinePipeline</code>. </p> <p>Tip</p> <p>Project running over several years (such as email automation)  may accumulate technical debt over time. Standardizing code practices  can limit the technical debt and ease the onboarding of new developers.</p> <p>The <code>MelusineDetector</code> class splits detection into three steps:</p> <ul> <li><code>pre_detect</code>: Select/combine the inputs needed for detection. Ex: Select the text parts tagged as <code>BODY</code> and combine them with the text  in the email header.</li> <li><code>detect</code>: Use regular expressions, ML models or heuristics to run detection on the input text.</li> <li><code>post_detect</code>: Run detection rules such as thresholding or combine results from multiple models.</li> </ul> <p>The method <code>transform</code> is defined by the BaseClass <code>MelusineDetector</code> and will call  the pre_detect/detect/post_detect methods in turn (Template pattern).</p> <pre><code># Instantiate Detector\ndetector = MyDetector()\n# Run pre_detect, detect and post_detect on input data\ndata_with_detection = detector.transform(data)\n</code></pre> <p>Here is the full code of a MelusineDetector to detect emails related to viruses.  The next sections break down the different parts of the code.</p> <pre><code>\n</code></pre> <p>The detector is run on a simple dataframe: <pre><code>\n</code></pre></p> <p>The output is a dataframe with a new <code>virus_result</code> column.</p> body header virus_result 0 This is a dangerous virus test True 1 test test False 2 test viruses are dangerous True 3 corona virus is annoying test False <p>Tip</p> <p>Columns that are not declared in the <code>output_columns</code> are dropped automatically.</p>"},{"location":"tutorials/05a_MelusineDetectors/#detector-init","title":"Detector init","text":"<p>In the init method, you should call the superclass init and provide:</p> <ul> <li>A name for the detector</li> <li>Inputs columns</li> <li>Output columns</li> </ul> <p>Tip</p> <p>If the init method of the super class is enough (parameters <code>name</code>, <code>input_columns</code> and <code>output_columns</code>) you may skip the init method entirely when defining your <code>MelusineDetector</code>.</p>"},{"location":"tutorials/05a_MelusineDetectors/#detector-pre_detect","title":"Detector pre_detect","text":"<p>The <code>pre_detect</code> method simply combines the header text and the body text (separated by a line break). <pre><code>\n</code></pre></p>"},{"location":"tutorials/05a_MelusineDetectors/#detector-detect","title":"Detector detect","text":"<p>The <code>detect</code> applies two regexes on the selected text: - A positive regex to catch mentions to viruses - A negative regex to avoid false positive detections <pre><code>\n</code></pre></p>"},{"location":"tutorials/05a_MelusineDetectors/#detector-post_detect","title":"Detector post_detect","text":"<p>The <code>post_detect</code> combines the regex detection result to determine the final result. <pre><code>\n</code></pre></p>"},{"location":"tutorials/05a_MelusineDetectors/#are-melusinedetectors-mandatory-for-melusine","title":"Are MelusineDetectors mandatory for melusine?","text":"<p>No.  </p> <p>You can use any scikit-learn compatible component in your <code>MelusinePipeline</code>.  However, we recommend using the <code>MelusineDetector</code> (and <code>MelusineTransformer</code>)  classes to benefit from:</p> <ul> <li>Code standardization</li> <li>Input columns validation</li> <li>Dataframe backend variabilization   Today dict and pandas backend are supported but more backends may be added (e.g. polars)</li> <li>Debug mode</li> <li>Multiprocessing</li> </ul> <p>Check-out the next tutorial  to discover advanced features of the <code>MelusineDetector</code> class.</p>"},{"location":"tutorials/05b_MelusineDetectorsAdvanced/","title":"Advanced Melusine Detectors","text":"<p>This tutorial presents the advanced features of the <code>MelusineDetector</code> class:</p> <ul> <li>Debug mode</li> <li>Row wise methods vs DataFrame wise methods</li> <li>Custom transform methods</li> </ul>"},{"location":"tutorials/05b_MelusineDetectorsAdvanced/#debug-mode","title":"Debug mode","text":"<p><code>MelusineDetector</code> are designed to be easily debugged. For that purpose, the  pre-detect/detect/post-detect methods all have a <code>debug_mode</code> argument.  The debug mode is activated by setting the debug attribute of a dataframe to True.</p> <pre><code>import pandas as pd\ndf = pd.DataFrame({\"bla\": [1, 2, 3]})\ndf.debug = True\n</code></pre> <p>Warning</p> <p>Debug mode activation is backend dependent. With a DictBackend, tou should use <code>my_dict[\"debug\"] = True</code></p> <p>When debug mode is activated, a column named \"DETECTOR_NAME_debug\" containing an empty  dictionary is automatically created. Populating this debug dict with debug info is then left to the user's responsibility. </p> <p>Exemple of a detector with debug data <pre><code>\n</code></pre></p> <p>In the end, an extra column is created containing debug data:</p> virus_result debug_virus 0 True {'detection_input': '...', 'positive_match_data': {'result': True, 'match_text': 'virus'}, 'negative_match_data': {'result': False, 'match_text': None}} 1 False {'detection_input': '...', 'positive_match_data': {'result': False, 'match_text': None}, 'negative_match_data': {'result': False, 'match_text': None}} 2 True {'detection_input': '...', 'positive_match_data': {'result': True, 'match_text': 'virus'}, 'negative_match_data': {'result': False, 'match_text': None}} 3 False {'detection_input': '...', 'positive_match_data': {'result': True, 'match_text': 'virus'}, 'negative_match_data': {'result': True, 'match_text': 'corona virus'}}"},{"location":"tutorials/05b_MelusineDetectorsAdvanced/#row-methods-vs-dataframe-methods","title":"Row methods vs dataframe methods","text":"<p>There are two ways to use the pre-detect/detect/post-detect methods:</p> <ul> <li>Row wise: The method works on a single row of a DataFrame. In that case, a map-like method is used to apply it on an entire dataframe (typically pandas.DataFrame.apply is used with the PandasBackend)</li> <li>Dataframe wise: The method works directly on the entire DataFrame.</li> </ul> <p>Tip</p> <p>Using row wise methods make your code backend independent. You may  switch from a <code>PandasBackend</code> to a <code>DictBackend</code> at any time.  The <code>PandasBackend</code> also supports multiprocessing for row wise methods.</p> <p>To use row wise methods, you just need to name the first parameter of \"row\".  Otherwise, dataframe wise transformations are used.</p> <p>Exemple of a Detector with dataframe wise method (works with a PandasBackend only). <pre><code>\n</code></pre></p>"},{"location":"tutorials/05b_MelusineDetectorsAdvanced/#custom-transform-methods","title":"Custom transform methods","text":"<p>If you are not happy with the <code>pre_detect</code>/<code>detect</code>/<code>post_detect</code> transform methods, you: </p> <ul> <li>Use custom template methods</li> <li>Use regular pipeline steps (not inheriting from the <code>MelusineDetector</code> class)</li> </ul> <p>In this exemple, the <code>prepare</code>/<code>run</code> custom transform methods are used instead of the default <code>pre_detect</code>/<code>detect</code>/<code>post_detect</code>.</p> <pre><code>\n</code></pre> <p>To configure custom transform methods you need to: </p> <ul> <li>inherit from the melusine.base.BaseMelusineDetector class</li> <li>define the <code>transform_methods</code> property</li> </ul> <p>The <code>transform</code> method will now call <code>prepare</code> and <code>run</code>.</p> <pre><code>\n</code></pre> <p>We can check that the <code>run</code> method was indeed called.</p> input_col output_col 0 test1 12345 1 test2 12345"},{"location":"tutorials/06_Configurations/","title":"Configurations","text":"<p>Melusine components can be instantiated using parameters defined in configurations. The <code>from_config</code> method accepts a <code>config_dict</code> argument <pre><code>\n</code></pre></p> <p>or a <code>config_key</code> argument. <pre><code>\n</code></pre> When <code>demo_pipeline</code> is given as argument, parameters are read from the <code>melusine.config</code> object at key <code>demo_pipeline</code>. </p>"},{"location":"tutorials/06_Configurations/#access-configurations","title":"Access configurations","text":"<p>The melusine configurations can be accessed with the <code>config</code> object. <pre><code>\n</code></pre></p> <p>The configuration of the <code>demo_pipeline</code> can then be easily inspected.</p> <pre><code>{\n'steps': [\n{'class_name': 'Cleaner', 'config_key': 'body_cleaner', 'module': 'melusine.processors'},\n{'class_name': 'Cleaner', 'config_key': 'header_cleaner', 'module': 'melusine.processors'},\n{'class_name': 'Segmenter', 'config_key': 'segmenter', 'module': 'melusine.processors'},\n{'class_name': 'ContentTagger', 'config_key': 'content_tagger', 'module': 'melusine.processors'},\n{'class_name': 'TextExtractor', 'config_key': 'text_extractor', 'module': 'melusine.processors'},\n{'class_name': 'Normalizer', 'config_key': 'demo_normalizer', 'module': 'melusine.processors'},\n{'class_name': 'EmergencyDetector', 'config_key': 'emergency_detector', 'module': 'melusine.detectors'}\n]\n}\n</code></pre>"},{"location":"tutorials/06_Configurations/#modify-configurations","title":"Modify configurations","text":"<p>The simplest way to modify configurations is to create a new directory directly. </p> <p>To deliver code in a production environment, using configuration files should be preferred to modifying the configurations on the fly. Melusine lets you specify the path to a folder containing yaml files and loads them (the <code>OmegaConf</code> package is used behind the scene). <pre><code>\n</code></pre></p> <p>When the <code>MELUSINE_CONFIG_DIR</code> environment variable is set, Melusine loads directly the configurations files located at the path specified by the environment variable. <pre><code>\n</code></pre></p> <p>Tip</p> <p>If the <code>MELUSINE_CONFIG_DIR</code> is set before melusine is imported (e.g., before starting the program), you don't need to call <code>config.reset()</code>. </p>"},{"location":"tutorials/06_Configurations/#export-configurations","title":"Export configurations","text":"<p>Creating your configuration folder from scratch would be cumbersome. It is advised to export the default configurations and then modify just the files you need.</p> <p>Tip</p> <p>The <code>export_default_config</code> returns a list of path to all the files created. </p>"},{"location":"tutorials/07_BasicClassification/","title":"Zero Shot Classification","text":"<p>Machine Learning is commonly used to classify data into pre-defined categories. </p> <pre><code>---\ntitle: Email classification\n---\nflowchart LR\n    Input[[Email]] --&gt; X(((Classifier)))\n    X --&gt; A(Car)\n    X --&gt; B(Boat)\n    X --&gt; C(Housing)\n    X --&gt; D(Health)</code></pre> <p>Typically, to reach high classification performance,  models need to be trained on context specific labeled data.  Zero-shot classification is a type of classification that  uses a pre-trained model and does not require further training on context specific data.</p>"},{"location":"tutorials/07_BasicClassification/#tutorial-intro","title":"Tutorial intro","text":"<p>In this tutorial we want to detect insatisfaction in an email dataset.  Let's create a basic dataset: </p> header body 0 Dossier 123456 Merci beaucoup pour votre gentillesse et votre \u00e9coute ! 1 R\u00e9clamation (Dossier 987654) Bonjour, je ne suis pas satisfait de cette situation, r\u00e9pondez-moi rapidement svp!"},{"location":"tutorials/07_BasicClassification/#classify-with-zero-shot-classification","title":"Classify with Zero-Shot-Classification","text":"<p>The <code>transformers</code> library makes it really simple to use pre-trained models for zero shot classification.</p> <pre><code>\n</code></pre> <p>The classifier returns a score for the \"positif\" and \"n\u00e9gatif\" label for each input text:</p> <pre><code>[\n{\n'sequence': \"Quelle belle journ\u00e9e aujourd'hui\",\n'labels': ['positif', 'n\u00e9gatif'],\n'scores': [0.95, 0.05]\n},\n{\n'sequence': 'La mar\u00e9e est haute',\n'labels': ['positif', 'n\u00e9gatif'],\n'scores': [0.76, 0.24]\n},\n{'sequence': 'Ce film est une catastrophe, je suis en col\u00e8re',\n'labels': ['n\u00e9gatif', 'positif'],\n'scores': [0.97, 0.03]\n}\n]\n</code></pre>"},{"location":"tutorials/07_BasicClassification/#implement-a-dissatisfaction-detector","title":"Implement a Dissatisfaction detector","text":"<p>A full email processing pipeline could contain multiple models.  Melusine uses the MelusineDetector template class to standardise how models are integrated into a pipeline.</p> <p>The <code>pre_detect</code> method assembles the text that we want to use for classification.</p> <pre><code>\n</code></pre> <p>The <code>detect</code> method runs the classification model on the text.</p> <pre><code>\n</code></pre> <p>The <code>post_detect</code> method applies a threshold on the prediction score to determine the detection result.</p> <pre><code>\n</code></pre> <p>On top of that, the detector takes care of building debug data to make the result explicable.</p>"},{"location":"tutorials/07_BasicClassification/#run-detection","title":"Run detection","text":"<p>Putting it all together, we run the detector on the input dataset.</p> <p>As a result, we get a new column <code>dissatisfaction_result</code> with the detection result.  We could have detection details by running the detector in debug mode.</p> header body dissatisfaction_result 0 Dossier 123456 Merci beaucoup pour votre gentillesse et votre \u00e9coute ! False 1 R\u00e9clamation (Dossier 987654) Bonjour, je ne suis pas satisfait de cette situation, r\u00e9pondez-moi rapidement svp! True"}]}